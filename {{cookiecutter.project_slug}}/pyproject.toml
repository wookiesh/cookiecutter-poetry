[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool]

[tool.black]
line-length = 100

[tool.pylint.format]
max-line-length = 100

[tool.isort]
balanced_wrapping = true
profile = 'black'

[tool.poetry]
authors = ["{{ cookiecutter.full_name.replace("\"", "\\\"") }} <{{ cookiecutter.email }}>"]
description = "{{ cookiecutter.project_short_description }}"
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
{%- set license_classifiers = {
    "MIT license": "MIT",
    "Apache Software License 2.0": "Apache-2.0",
    "GNU General Public License v3.0": "GPL-3.0-only",
    "GNU General Public License v2.0": "GPL-2.0-only",
    "BSD 3-Clause 'New' or 'Revised' License": "BSD-3-Clause",
    "GNU Lesser General Public License v2.1": "LGPL-2.1-only",
    "BSD 2-Clause 'Simplified' License": "BSD-2-Clause",
} %}
{%- if cookiecutter.open_source_license in license_classifiers %}
license = "{{ license_classifiers[cookiecutter.open_source_license] }}"
{%- endif %}
readme = "README.md"
keywords = ["{{ cookiecutter.project_slug }}"]
repository = "https://git.ana.lu/{{ cookiecutter.gitlab_group }}/{{ cookiecutter.project_slug }}"
packages = [
    { include = "{{cookiecutter.module_name}}", from = "src" },
]
classifiers = [
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development",
]

[tool.poetry.urls]
"Bug Tracker" = "ttps://git.ana.lu/{{ cookiecutter.gitlab_group }}/{{ cookiecutter.project_slug }}/issues"
"Source" = "ttps://git.ana.lu/{{ cookiecutter.gitlab_group }}/{{ cookiecutter.project_slug }}"
{% if cookiecutter.create_docs == "y" -%}"Documentation" = "https://{{ cookiecutter.project_slug }}.readthedocs.io"{% endif %}

[tool.poetry.dependencies]
python = "^3.10"
{% if cookiecutter.provide_rest_api == "y" -%}
fastapi = "*"
uvicorn = "*"
{% endif %}
{% if cookiecutter.command_line_interface == 'typer' -%}typer = "*"{% endif %}
pydantic="*"
rollbar="*"
toml="*"


[tool.poetry.dev-dependencies]

{% if cookiecutter.create_docs == "y" -%}Sphinx = "^1.8.5"{% endif %}
autopep8 = "*"
bandit = "*"
black = "*"
coverage = "*"
fabric = "*"
flake8 = "*"
flake8-annotations = "*"
flake8-bandit = "*"
flake8-black = "*"
flake8-bugbear = "*"
flake8-builtins = "*"
flake8-comprehensions = "*"
flake8-docstrings = "*"
flake8-functions = "*"
flake8-isort = "*"
flake8-pydocstyle = "*"
flake8-use-pathlib = "*"
ipython = "*"
Jinja2 = "*"
keyring = "*"
mypy = "*"
nox = "*"
pre-commit = "*"
pylint = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-runner = "*"
pytest-xdist = "*"
python-dotenv = "*"
rich = "*"
safety = "*"
toml-sort = "*"
wheel = "*"
yamllint = "*"

{%- if 'none' not in cookiecutter.command_line_interface|lower %}
[tool.poetry.plugins."console_scripts"]
"{{ cookiecutter.module_name }}" = "{{ cookiecutter.module_name }}.cli:app"
{%- endif %}

[tool.pylint.messages_control]
disable = "fixme, too-few-public-methods"
extension-pkg-whitelist = "pydantic"

[tool.pytest.ini_options]
addopts = "-n 4"
asyncio_mode = "auto"
filterwarnings = [
    'ignore:"@coroutine" decorator is deprecated since Python 3.8, use "async def" instead:DeprecationWarning',
]
